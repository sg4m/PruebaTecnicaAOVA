#!/usr/bin/env python3
"""
Script de prueba para el sistema de extracci√≥n de informaci√≥n de leads
Simula una conversaci√≥n t√≠pica de ventas para probar la funcionalidad
"""

import sys
import os

# Agregar el directorio ra√≠z del proyecto al path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

from src.ai.gemini_client import GeminiClient
from src.utils.config import Config
import json

def test_conversation_generation():
    """Probar el sistema de generaci√≥n de conversaciones (funcionalidad disponible)"""
    
    print("üß™ Iniciando prueba del sistema de conversaci√≥n con Gemini...")
    
    # Inicializar cliente de Gemini
    try:
        client = GeminiClient()
        print("‚úÖ Cliente Gemini inicializado correctamente")
    except Exception as e:
        print(f"‚ùå Error inicializando Gemini: {e}")
        return
    
    # Conversaci√≥n simulada
    conversacion_simulada = [
        {
            "role": "user",
            "content": "Hola, me llamo Mar√≠a Garc√≠a y soy directora de marketing de TechSolutions SA. Estamos buscando servicios de automatizaci√≥n de procesos de ventas."
        },
        {
            "role": "assistant", 
            "content": "¬°Hola Mar√≠a! Es un placer conocerte. Soy AOVA, consultor de crecimiento estrat√©gico. Me parece muy interesante que busquen automatizaci√≥n de ventas. ¬øCu√°les son los principales desaf√≠os que enfrentan actualmente en su proceso de ventas?"
        },
        {
            "role": "user",
            "content": "Bueno, somos una empresa de tecnolog√≠a de aproximadamente 50 empleados. Nuestro problema principal es que perdemos muchos leads porque no tenemos un sistema automatizado de seguimiento. Tambi√©n nos toma mucho tiempo calificar los prospectos manualmente."
        },
        {
            "role": "assistant",
            "content": "Entiendo perfectamente el problema, Mar√≠a. La p√©rdida de leads por falta de seguimiento automatizado es muy com√∫n en empresas de crecimiento como la suya. ¬øTienen definido un presupuesto aproximado para implementar una soluci√≥n de automatizaci√≥n?"
        },
        {
            "role": "user", 
            "content": "S√≠, tenemos aprobado un presupuesto de entre 15,000 y 25,000 d√≥lares para este proyecto. Necesitamos implementarlo antes del pr√≥ximo trimestre. Mi email es maria.garcia@techsolutions.com por si necesitas enviarme informaci√≥n adicional."
        },
        {
            "role": "assistant",
            "content": "Excelente, Mar√≠a. Con ese presupuesto y timeline definitivamente podemos crear una soluci√≥n robusta para TechSolutions. Te voy a preparar una propuesta personalizada. ¬øCu√°l ser√≠a el mejor momento para agendar una demo donde te pueda mostrar casos de √©xito similares?"
        },
        {
            "role": "user",
            "content": "Me parece perfecto. Podr√≠amos agendar algo para la pr√≥xima semana. Tengo autoridad total para tomar la decisi√≥n de compra, as√≠ que si la propuesta es buena podr√≠amos cerrar r√°pidamente."
        }
    ]
    
    print(f"\nüìã Procesando conversaci√≥n simulada con {len(conversacion_simulada)} mensajes...")
    
    # Probar generaci√≥n de respuestas
    try:
        print("\nü§ñ Probando generaci√≥n de respuestas...")
        
        # Tomar solo los mensajes del usuario para generar respuestas
        user_messages = [msg for msg in conversacion_simulada if msg['role'] == 'user']
        
        for i, msg in enumerate(user_messages[:3], 1):  # Probar solo 3 mensajes
            print(f"\n--- PRUEBA {i} ---")
            print(f"ÔøΩ Usuario: {msg['content'][:100]}...")
            
            # Generar respuesta
            respuesta = client.generate_response(
                msg['content'],
                context=conversacion_simulada[:i*2]  # Contexto previo
            )
            
            print(f"ü§ñ Respuesta generada: {respuesta[:150]}...")
            
        print(f"\n‚úÖ Prueba de generaci√≥n completada exitosamente!")
        
    except Exception as e:
        print(f"‚ùå Error durante la generaci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # Verificar configuraci√≥n
    try:
        Config.validate_config()
        print("‚úÖ Configuraci√≥n v√°lida")
    except ValueError as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        print("üí° Aseg√∫rate de tener configurado GOOGLE_API_KEY en .env")
        exit(1)
    
    test_conversation_generation()